[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-desktop-mcp-playground"
version = "0.1.0"
description = "Python framework for AI-powered productivity workflows using Claude Desktop's MCP servers"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Claude Desktop MCP Playground Contributors"}
]
keywords = ["ai", "productivity", "workflow", "agent", "platform", "claude", "anthropic", "mcp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.3.1",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.4.1",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
]
test = [
    "pytest>=7.3.1",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
]

[project.urls]
Homepage = "https://github.com/seanpoyner/claude-desktop-mcp-playground"
Documentation = "https://github.com/seanpoyner/claude-desktop-mcp-playground/blob/main/README.md"
Repository = "https://github.com/seanpoyner/claude-desktop-mcp-playground"
Issues = "https://github.com/seanpoyner/claude-desktop-mcp-playground/issues"

[project.scripts]
playground = "claude_desktop_mcp.cli:main"
pg = "claude_desktop_mcp.cli:main"

[tool.setuptools]
packages = ["claude_desktop_mcp"]

[tool.setuptools.package-data]
claude_desktop_mcp = ["*.json", "*.yaml", "*.yml"]

# Black formatting
[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["claude_desktop_mcp"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]